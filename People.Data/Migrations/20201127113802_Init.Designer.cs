// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using People.Data.Entities;

namespace People.Data.Migrations
{
    [DbContext(typeof(PeopleDWContext))]
    [Migration("20201127113802_Init")]
    partial class Init
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.14-servicing-32113")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("People.Data.Entities.Authority", b =>
                {
                    b.Property<int>("IdAuthority")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Id_authority")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("DatetimeAdded")
                        .HasColumnName("Datetime_added")
                        .HasColumnType("datetime");

                    b.HasKey("IdAuthority");

                    b.ToTable("Authority");
                });

            modelBuilder.Entity("People.Data.Entities.AuthorityInfo", b =>
                {
                    b.Property<int>("IdDw")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Id_dw")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("DatetimeAdded")
                        .HasColumnName("Datetime_added")
                        .HasColumnType("datetime");

                    b.Property<int>("IdAuthority")
                        .HasColumnName("Id_authority");

                    b.Property<string>("NameAuthority")
                        .HasColumnName("Name_authority")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<bool?>("RelevanceRecord")
                        .HasColumnName("Relevance_record");

                    b.Property<int?>("TypeAuthority")
                        .HasColumnName("Type_authority");

                    b.HasKey("IdDw");

                    b.HasIndex("IdAuthority");

                    b.HasIndex("TypeAuthority")
                        .HasName("Relationship_11_FK");

                    b.ToTable("Authority_info");
                });

            modelBuilder.Entity("People.Data.Entities.AuthorityType", b =>
                {
                    b.Property<int>("TypeAuthority")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Type_authority")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("NameType")
                        .IsRequired()
                        .HasColumnName("Name_type")
                        .HasMaxLength(256)
                        .IsUnicode(false);

                    b.HasKey("TypeAuthority");

                    b.ToTable("Authority_type");
                });

            modelBuilder.Entity("People.Data.Entities.Citizenship", b =>
                {
                    b.Property<long>("IdRecordCitizenship")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Id_record_citizenship")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("DateDivorce")
                        .HasColumnName("Date_divorce")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("DateIssue")
                        .HasColumnName("Date_issue")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("DatetimeAdded")
                        .HasColumnName("Datetime_added")
                        .HasColumnType("datetime");

                    b.Property<int?>("IdAuthority")
                        .HasColumnName("Id_authority");

                    b.Property<int?>("IdCountry")
                        .HasColumnName("Id_country");

                    b.Property<long?>("IdPeople")
                        .HasColumnName("Id_people");

                    b.HasKey("IdRecordCitizenship");

                    b.HasIndex("IdAuthority")
                        .HasName("Relationship_13_FK");

                    b.HasIndex("IdCountry")
                        .HasName("Relationship_16_FK");

                    b.HasIndex("IdPeople")
                        .HasName("Relationship_17_FK");

                    b.ToTable("Citizenship");
                });

            modelBuilder.Entity("People.Data.Entities.Country", b =>
                {
                    b.Property<int>("IdCountry")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Id_country")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("DatetimeAdded")
                        .HasColumnName("Datetime_added")
                        .HasColumnType("datetime");

                    b.HasKey("IdCountry");

                    b.ToTable("Country");
                });

            modelBuilder.Entity("People.Data.Entities.CountryInfo", b =>
                {
                    b.Property<int>("IdDw")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Id_dw")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("DatetimeAdded")
                        .HasColumnName("Datetime_added")
                        .HasColumnType("datetime");

                    b.Property<int>("IdCountry")
                        .HasColumnName("Id_country");

                    b.Property<string>("NameCountry")
                        .HasColumnName("Name_country")
                        .HasMaxLength(128)
                        .IsUnicode(false);

                    b.Property<bool?>("RelevanceRecord")
                        .HasColumnName("Relevance_record");

                    b.HasKey("IdDw");

                    b.HasIndex("IdCountry");

                    b.ToTable("Country_info");
                });

            modelBuilder.Entity("People.Data.Entities.District", b =>
                {
                    b.Property<int>("IdDistrict")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Id_district")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("DatetimeAdded")
                        .HasColumnName("Datetime_added")
                        .HasColumnType("datetime");

                    b.HasKey("IdDistrict");

                    b.ToTable("District");
                });

            modelBuilder.Entity("People.Data.Entities.DistrictInfo", b =>
                {
                    b.Property<int>("IdDw")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Id_dw")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("DatetimeAdded")
                        .HasColumnName("Datetime_added")
                        .HasColumnType("datetime");

                    b.Property<int>("IdDistrict")
                        .HasColumnName("Id_district");

                    b.Property<int?>("IdTown")
                        .HasColumnName("Id_town");

                    b.Property<string>("NameDistrict")
                        .HasColumnName("Name_district")
                        .HasMaxLength(128)
                        .IsUnicode(false);

                    b.Property<bool?>("RelevanceRecord")
                        .HasColumnName("Relevance_record");

                    b.HasKey("IdDw");

                    b.HasIndex("IdDistrict");

                    b.HasIndex("IdTown")
                        .HasName("Relationship_10_FK");

                    b.ToTable("District_info");
                });

            modelBuilder.Entity("People.Data.Entities.Family", b =>
                {
                    b.Property<long>("IdFamily")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Id_family")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("DateDivorce")
                        .HasColumnName("Date_divorce")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("DateRegistration")
                        .HasColumnName("Date_registration")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("DatetimeAdded")
                        .HasColumnName("Datetime_added")
                        .HasColumnType("datetime");

                    b.Property<int?>("IdAuthority")
                        .HasColumnName("Id_authority");

                    b.Property<long?>("IdSpouse1")
                        .HasColumnName("Id_spouse1");

                    b.Property<long?>("IdSpouse2")
                        .HasColumnName("Id_spouse2");

                    b.HasKey("IdFamily");

                    b.HasIndex("IdAuthority")
                        .HasName("Relationship_15_FK");

                    b.HasIndex("IdSpouse1")
                        .HasName("Relationship_2_FK");

                    b.HasIndex("IdSpouse2")
                        .HasName("Relationship_3_FK");

                    b.ToTable("Family");
                });

            modelBuilder.Entity("People.Data.Entities.House", b =>
                {
                    b.Property<int>("IdHouse")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Id_house")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("DatetimeAdded")
                        .HasColumnName("Datetime_added")
                        .HasColumnType("datetime");

                    b.HasKey("IdHouse");

                    b.ToTable("House");
                });

            modelBuilder.Entity("People.Data.Entities.HouseInfo", b =>
                {
                    b.Property<int>("IdDw")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Id_dw")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("DatetimeAdded")
                        .HasColumnName("Datetime_added")
                        .HasColumnType("datetime");

                    b.Property<int>("IdHouse")
                        .HasColumnName("Id_house");

                    b.Property<int?>("IdStreet")
                        .HasColumnName("Id_street");

                    b.Property<string>("Name")
                        .HasMaxLength(10);

                    b.Property<bool?>("RelevanceRecord")
                        .HasColumnName("Relevance_record");

                    b.HasKey("IdDw");

                    b.HasIndex("IdHouse");

                    b.HasIndex("IdStreet")
                        .HasName("Relationship_22_FK");

                    b.ToTable("House_info");
                });

            modelBuilder.Entity("People.Data.Entities.Person", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("DatetimeAdded")
                        .HasColumnName("Datetime_added")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.ToTable("Person");
                });

            modelBuilder.Entity("People.Data.Entities.PersonInfo", b =>
                {
                    b.Property<long>("IdPeople")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Id_people")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("DateBirthday")
                        .HasColumnName("Date_birthday")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("DateDeath")
                        .HasColumnName("Date_death")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("DatetimeAdded")
                        .HasColumnName("Datetime_added")
                        .HasColumnType("datetime");

                    b.Property<string>("Gender")
                        .HasMaxLength(1)
                        .IsUnicode(false);

                    b.Property<int?>("IdCountryBirthday")
                        .HasColumnName("Id_country_birthday");

                    b.Property<int?>("IdRegionBirthday")
                        .HasColumnName("Id_region_birthday");

                    b.Property<int?>("IdTownBirthday")
                        .HasColumnName("Id_town_birthday");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .IsUnicode(false);

                    b.Property<string>("Patronymic")
                        .HasMaxLength(256)
                        .IsUnicode(false);

                    b.Property<string>("Surname")
                        .HasMaxLength(256)
                        .IsUnicode(false);

                    b.HasKey("IdPeople");

                    b.HasIndex("IdCountryBirthday")
                        .HasName("Relationship_19_FK");

                    b.HasIndex("IdRegionBirthday")
                        .HasName("Relationship_20_FK");

                    b.HasIndex("IdTownBirthday")
                        .HasName("Relationship_21_FK");

                    b.ToTable("Person_info");
                });

            modelBuilder.Entity("People.Data.Entities.PersonPhoto", b =>
                {
                    b.Property<long>("HashPhoto")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Hash_photo")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("DatePhoto")
                        .HasColumnName("Date_photo")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("DatetimeAdded")
                        .HasColumnName("Datetime_added")
                        .HasColumnType("datetime");

                    b.Property<long?>("IdPeople")
                        .HasColumnName("Id_people");

                    b.Property<string>("PathToPhoto")
                        .HasColumnName("Path_to_photo")
                        .HasMaxLength(256)
                        .IsUnicode(false);

                    b.HasKey("HashPhoto");

                    b.HasIndex("IdPeople")
                        .HasName("Relationship_1_FK");

                    b.ToTable("Person_photo");
                });

            modelBuilder.Entity("People.Data.Entities.Region", b =>
                {
                    b.Property<int>("IdRegion")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Id_region")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("DatetimeAdded")
                        .HasColumnName("Datetime_added")
                        .HasColumnType("datetime");

                    b.HasKey("IdRegion");

                    b.ToTable("Region");
                });

            modelBuilder.Entity("People.Data.Entities.RegionInfo", b =>
                {
                    b.Property<int>("IdDw")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Id_dw")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("DatetimeAdded")
                        .HasColumnName("Datetime_added")
                        .HasColumnType("datetime");

                    b.Property<int?>("IdCountry")
                        .HasColumnName("Id_country");

                    b.Property<int>("IdRegion")
                        .HasColumnName("Id_region");

                    b.Property<string>("NameRegion")
                        .HasColumnName("Name_region")
                        .HasMaxLength(128)
                        .IsUnicode(false);

                    b.Property<bool?>("RelevanceRecord")
                        .HasColumnName("Relevance_record");

                    b.HasKey("IdDw");

                    b.HasIndex("IdCountry")
                        .HasName("Relationship_8_FK");

                    b.HasIndex("IdRegion");

                    b.ToTable("Region_info");
                });

            modelBuilder.Entity("People.Data.Entities.Registration", b =>
                {
                    b.Property<long>("IdRegistration")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Id_registration")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("DateIssue")
                        .HasColumnName("Date_issue")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("DateTermination")
                        .HasColumnName("Date_termination")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("DatetimeAdded")
                        .HasColumnName("Datetime_added")
                        .HasColumnType("datetime");

                    b.Property<int?>("IdAuthority")
                        .HasColumnName("Id_authority");

                    b.Property<int?>("IdCountry")
                        .HasColumnName("Id_country");

                    b.Property<int?>("IdDistrict")
                        .HasColumnName("Id_district");

                    b.Property<int?>("IdHouse")
                        .HasColumnName("Id_house");

                    b.Property<long?>("IdPeople")
                        .HasColumnName("Id_people");

                    b.Property<int?>("IdRegion")
                        .HasColumnName("Id_region");

                    b.Property<int?>("IdStreet")
                        .HasColumnName("Id_street");

                    b.Property<int?>("IdTown")
                        .HasColumnName("Id_town");

                    b.Property<int?>("IdTypeRegistration")
                        .HasColumnName("Id_type_registration");

                    b.Property<int?>("NumFlat")
                        .HasColumnName("Num_flat");

                    b.Property<int?>("NumHousing")
                        .HasColumnName("Num_housing");

                    b.HasKey("IdRegistration");

                    b.HasIndex("IdAuthority")
                        .HasName("Relationship_14_FK");

                    b.HasIndex("IdCountry")
                        .HasName("Relationship_4_FK");

                    b.HasIndex("IdDistrict")
                        .HasName("Relationship_7_FK");

                    b.HasIndex("IdHouse")
                        .HasName("Relationship_25_FK");

                    b.HasIndex("IdPeople")
                        .HasName("Relationship_18_FK");

                    b.HasIndex("IdRegion")
                        .HasName("Relationship_5_FK");

                    b.HasIndex("IdStreet")
                        .HasName("Relationship_24_FK");

                    b.HasIndex("IdTown")
                        .HasName("Relationship_6_FK");

                    b.HasIndex("IdTypeRegistration")
                        .HasName("Relationship_12_FK");

                    b.ToTable("Registration");
                });

            modelBuilder.Entity("People.Data.Entities.RegistrationType", b =>
                {
                    b.Property<int>("IdTypeRegistration")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Id_type_registration")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("DescriptionRegistration")
                        .IsRequired()
                        .HasColumnName("Description_registration")
                        .HasMaxLength(256)
                        .IsUnicode(false);

                    b.HasKey("IdTypeRegistration");

                    b.ToTable("Registration_type");
                });

            modelBuilder.Entity("People.Data.Entities.Street", b =>
                {
                    b.Property<int>("IdStreet")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Id_street")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("DatetimeAdded")
                        .HasColumnName("Datetime_added")
                        .HasColumnType("datetime");

                    b.HasKey("IdStreet");

                    b.ToTable("Street");
                });

            modelBuilder.Entity("People.Data.Entities.StreetInfo", b =>
                {
                    b.Property<int>("IdDw")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Id_dw")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("DatetimeAdded")
                        .HasColumnName("Datetime_added")
                        .HasColumnType("datetime");

                    b.Property<int?>("IdDistrict")
                        .HasColumnName("Id_district");

                    b.Property<int>("IdStreet")
                        .HasColumnName("Id_street");

                    b.Property<string>("NameStreet")
                        .HasColumnName("Name_street")
                        .HasMaxLength(128)
                        .IsUnicode(false);

                    b.Property<bool?>("RelevanceRecord")
                        .HasColumnName("Relevance_record");

                    b.HasKey("IdDw");

                    b.HasIndex("IdDistrict")
                        .HasName("Relationship_23_FK");

                    b.HasIndex("IdStreet");

                    b.ToTable("Street_info");
                });

            modelBuilder.Entity("People.Data.Entities.Town", b =>
                {
                    b.Property<int>("IdTown")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Id_town")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("DatetimeAdded")
                        .HasColumnName("Datetime_added")
                        .HasColumnType("datetime");

                    b.HasKey("IdTown");

                    b.ToTable("Town");
                });

            modelBuilder.Entity("People.Data.Entities.TownInfo", b =>
                {
                    b.Property<int>("IdDw")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Id_dw")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("DatetimeAdded")
                        .HasColumnName("Datetime_added")
                        .HasColumnType("datetime");

                    b.Property<int?>("IdRegion")
                        .HasColumnName("Id_region");

                    b.Property<int>("IdTown")
                        .HasColumnName("Id_town");

                    b.Property<string>("NameTown")
                        .HasColumnName("Name_town")
                        .HasMaxLength(128)
                        .IsUnicode(false);

                    b.Property<bool?>("RelevanceRecord")
                        .HasColumnName("Relevance_record");

                    b.HasKey("IdDw");

                    b.HasIndex("IdRegion")
                        .HasName("Relationship_9_FK");

                    b.HasIndex("IdTown");

                    b.ToTable("Town_info");
                });

            modelBuilder.Entity("People.Data.Entities.AuthorityInfo", b =>
                {
                    b.HasOne("People.Data.Entities.Authority", "IdAuthorityNavigation")
                        .WithMany("AuthorityInfo")
                        .HasForeignKey("IdAuthority")
                        .HasConstraintName("FK_Authority_info_Authority");

                    b.HasOne("People.Data.Entities.AuthorityType", "TypeAuthorityNavigation")
                        .WithMany("AuthorityInfo")
                        .HasForeignKey("TypeAuthority")
                        .HasConstraintName("FK_AUTHORIT_RELATIONS_TYPES_AU");
                });

            modelBuilder.Entity("People.Data.Entities.Citizenship", b =>
                {
                    b.HasOne("People.Data.Entities.Authority", "IdAuthorityNavigation")
                        .WithMany("Citizenship")
                        .HasForeignKey("IdAuthority")
                        .HasConstraintName("FK_CITIZENS_RELATIONS_AUTHORIT");

                    b.HasOne("People.Data.Entities.Country", "IdCountryNavigation")
                        .WithMany("Citizenship")
                        .HasForeignKey("IdCountry")
                        .HasConstraintName("FK_CITIZENS_RELATIONS_COUNTRIE");

                    b.HasOne("People.Data.Entities.Person", "IdPeopleNavigation")
                        .WithMany("Citizenship")
                        .HasForeignKey("IdPeople")
                        .HasConstraintName("FK_CITIZENS_RELATIONS_peopleDWS");
                });

            modelBuilder.Entity("People.Data.Entities.CountryInfo", b =>
                {
                    b.HasOne("People.Data.Entities.Country", "IdCountryNavigation")
                        .WithMany("CountryInfo")
                        .HasForeignKey("IdCountry")
                        .HasConstraintName("FK_Country_info_CountryR");
                });

            modelBuilder.Entity("People.Data.Entities.DistrictInfo", b =>
                {
                    b.HasOne("People.Data.Entities.District", "IdDistrictNavigation")
                        .WithMany("DistrictInfo")
                        .HasForeignKey("IdDistrict")
                        .HasConstraintName("FK_District_info_DistrictR");

                    b.HasOne("People.Data.Entities.Town", "IdTownNavigation")
                        .WithMany("DistrictInfo")
                        .HasForeignKey("IdTown")
                        .HasConstraintName("FK_DISTRICT_RELATIONS_TOWNS");
                });

            modelBuilder.Entity("People.Data.Entities.Family", b =>
                {
                    b.HasOne("People.Data.Entities.Authority", "IdAuthorityNavigation")
                        .WithMany("Family")
                        .HasForeignKey("IdAuthority")
                        .HasConstraintName("FK_FAMILIES_RELATIONS_AUTHORIT");

                    b.HasOne("People.Data.Entities.Person", "IdSpouse1Navigation")
                        .WithMany("FamilyIdSpouse1Navigation")
                        .HasForeignKey("IdSpouse1")
                        .HasConstraintName("FK_SPOUSE2_FAMILIES_vs_peopleDWS");

                    b.HasOne("People.Data.Entities.Person", "IdSpouse2Navigation")
                        .WithMany("FamilyIdSpouse2Navigation")
                        .HasForeignKey("IdSpouse2")
                        .HasConstraintName("FK_SPOUSE1_FAMILIES_vs_peopleDWS");
                });

            modelBuilder.Entity("People.Data.Entities.HouseInfo", b =>
                {
                    b.HasOne("People.Data.Entities.House", "IdHouseNavigation")
                        .WithMany("HouseInfo")
                        .HasForeignKey("IdHouse")
                        .HasConstraintName("FK_House_info_HouseR");

                    b.HasOne("People.Data.Entities.Street", "IdStreetNavigation")
                        .WithMany("HouseInfo")
                        .HasForeignKey("IdStreet")
                        .HasConstraintName("FK_House_info_Street");
                });

            modelBuilder.Entity("People.Data.Entities.PersonInfo", b =>
                {
                    b.HasOne("People.Data.Entities.Country", "IdCountryBirthdayNavigation")
                        .WithMany("PersonInfo")
                        .HasForeignKey("IdCountryBirthday")
                        .HasConstraintName("FK_peopleDWS_RELATIONS_COUNTRIE");

                    b.HasOne("People.Data.Entities.Person", "IdPeopleNavigation")
                        .WithOne("PersonInfo")
                        .HasForeignKey("People.Data.Entities.PersonInfo", "IdPeople")
                        .HasConstraintName("FK_People_info_People");

                    b.HasOne("People.Data.Entities.Region", "IdRegionBirthdayNavigation")
                        .WithMany("PersonInfo")
                        .HasForeignKey("IdRegionBirthday")
                        .HasConstraintName("FK_peopleDWS_RELATIONS_REGIONS");

                    b.HasOne("People.Data.Entities.Town", "IdTownBirthdayNavigation")
                        .WithMany("PersonInfo")
                        .HasForeignKey("IdTownBirthday")
                        .HasConstraintName("FK_peopleDWS_RELATIONS_TOWNS");
                });

            modelBuilder.Entity("People.Data.Entities.PersonPhoto", b =>
                {
                    b.HasOne("People.Data.Entities.Person", "IdPeopleNavigation")
                        .WithMany("PersonPhoto")
                        .HasForeignKey("IdPeople")
                        .HasConstraintName("FK_PHOTOS_P_RELATIONS_peopleDWS");
                });

            modelBuilder.Entity("People.Data.Entities.RegionInfo", b =>
                {
                    b.HasOne("People.Data.Entities.Country", "IdCountryNavigation")
                        .WithMany("RegionInfo")
                        .HasForeignKey("IdCountry")
                        .HasConstraintName("FK_REGIONS_RELATIONS_COUNTRIE");

                    b.HasOne("People.Data.Entities.Region", "IdRegionNavigation")
                        .WithMany("RegionInfo")
                        .HasForeignKey("IdRegion")
                        .HasConstraintName("FK_Region_info_RegionR");
                });

            modelBuilder.Entity("People.Data.Entities.Registration", b =>
                {
                    b.HasOne("People.Data.Entities.Authority", "IdAuthorityNavigation")
                        .WithMany("Registration")
                        .HasForeignKey("IdAuthority")
                        .HasConstraintName("FK_REGISTRA_RELATIONS_AUTHORIT");

                    b.HasOne("People.Data.Entities.Country", "IdCountryNavigation")
                        .WithMany("Registration")
                        .HasForeignKey("IdCountry")
                        .HasConstraintName("FK_REGISTRA_RELATIONS_COUNTRIE");

                    b.HasOne("People.Data.Entities.District", "IdDistrictNavigation")
                        .WithMany("Registration")
                        .HasForeignKey("IdDistrict")
                        .HasConstraintName("FK_REGISTRA_RELATIONS_DISTRICT");

                    b.HasOne("People.Data.Entities.House", "IdHouseNavigation")
                        .WithMany("Registration")
                        .HasForeignKey("IdHouse")
                        .HasConstraintName("FK_REGISTRA_RELATIONS_HOUSES");

                    b.HasOne("People.Data.Entities.Person", "IdPeopleNavigation")
                        .WithMany("Registration")
                        .HasForeignKey("IdPeople")
                        .HasConstraintName("FK_REGISTRA_RELATIONS_peopleDWS");

                    b.HasOne("People.Data.Entities.Region", "IdRegionNavigation")
                        .WithMany("Registration")
                        .HasForeignKey("IdRegion")
                        .HasConstraintName("FK_REGISTRA_RELATIONS_REGIONS");

                    b.HasOne("People.Data.Entities.Street", "IdStreetNavigation")
                        .WithMany("Registration")
                        .HasForeignKey("IdStreet")
                        .HasConstraintName("FK_REGISTRA_RELATIONS_STREETS");

                    b.HasOne("People.Data.Entities.Town", "IdTownNavigation")
                        .WithMany("Registration")
                        .HasForeignKey("IdTown")
                        .HasConstraintName("FK_REGISTRA_RELATIONS_TOWNS");

                    b.HasOne("People.Data.Entities.RegistrationType", "IdTypeRegistrationNavigation")
                        .WithMany("Registration")
                        .HasForeignKey("IdTypeRegistration")
                        .HasConstraintName("FK_REGISTRA_RELATIONS_TYPE_REG");
                });

            modelBuilder.Entity("People.Data.Entities.StreetInfo", b =>
                {
                    b.HasOne("People.Data.Entities.District", "IdDistrictNavigation")
                        .WithMany("StreetInfo")
                        .HasForeignKey("IdDistrict")
                        .HasConstraintName("FK_STREETS_RELATIONS_DISTRICT");

                    b.HasOne("People.Data.Entities.Street", "IdStreetNavigation")
                        .WithMany("StreetInfo")
                        .HasForeignKey("IdStreet")
                        .HasConstraintName("FK_Street_info_StreetR");
                });

            modelBuilder.Entity("People.Data.Entities.TownInfo", b =>
                {
                    b.HasOne("People.Data.Entities.Region", "IdRegionNavigation")
                        .WithMany("TownInfo")
                        .HasForeignKey("IdRegion")
                        .HasConstraintName("FK_TOWNS_RELATIONS_REGIONS");

                    b.HasOne("People.Data.Entities.Town", "IdTownNavigation")
                        .WithMany("TownInfo")
                        .HasForeignKey("IdTown")
                        .HasConstraintName("FK_Town_info_TownR");
                });
#pragma warning restore 612, 618
        }
    }
}
